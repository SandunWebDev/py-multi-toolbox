[tool.poetry]
name = "pythonscientificcompcourse"
version = "0.1.0"
description = "PythonScientificCompCourse"
authors = ["Sandun <SandunWebDev@gmail.com>"]
license = "ISC License"
readme = "README.md"
repository = ""
homepage = ""
keywords = []
packages = [ { include = "pythonscientificcompcourse", from = "src" } ]

# Scripts to run user Packages/Modules (Ex. poetry run cli)
[tool.poetry.scripts]
cli = "pythonscientificcompcourse.cli:main"
start = "pythonscientificcompcourse.starter:main"
start-playground = "playground.playground:main"

# Scripts to run Thirdparty Pacakges/Etc (Ex. poetry run task test)
[tool.taskipy.tasks]
# Developer Server
dev = "cd ./scripts/nodejsRunner && npm run nodemon-dev"
dev-playground = "cd ./scripts/nodejsRunner && npm run nodemon-playground"

# Testing
test = "python -m pytest"
test-watch = "poetry run pytest-watch"
test-coverage = "coverage run -m pytest && coverage report"
test-coverage-html = "coverage run -m pytest --cov --cov-report html --cov-report term && python ./scripts/html-coverage-opener/html-coverage-opener.py"

# Linting, Prettifying, TypeChecking, SecurityChecking, Etc..
lint-isort = "poetry run isort --check ./"
lint-isort-fix = "poetry run isort ./"
lint-black = "poetry run black --diff"
lint-black-fix = "poetry run black"
lint-flake8 = "poetry run flake8"
lint-mypy = "poetry run mypy"
lint-pyright = "cd ./scripts/nodejsRunner && npm run typecheck-pyright" # Optional Static Type Checker
lint-safety = "poetry run safety check"
lint-all = "task lint-isort && task lint-black && task lint-flake8 && task lint-mypy && task lint-safety"
lint-all-fix = "task lint-isort-fix && task lint-black-fix && task lint-flake8 && task lint-mypy && task lint-safety"

# Docs
docs-liveserver= "sphinx-autobuild docs/source/ docs/build/html --open-browser --watch ./"
docs-build = "sphinx-build -b html docs/source/ docs/build/html"

# Pre-Commit Hooks Related
precommit-install = "poetry run pre-commit install"
precommit-runinall = "poetry run pre-commit run --all-files"

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.26.0"

[tool.poetry.dev-dependencies]
# Linting - Prettifying & Sorting
black = "^21.9b0"
isort = "^5.9.3"

# Linting - Flake8 & Plugins
darglint = "^1.5.8"
flake8 = "^3.9.2"
flake8-black = "^0.2.1"
flake8-bandit = "^2.1.2"
flake8-bugbear = "^21.9.1"
flake8-builtins = "^1.5.3"
flake8-comprehensions = "^3.6.1"
flake8-debugger = "^4.0.0"
flake8-docstrings = "^1.6.0"
flake8-isort = "^4.0.0"
flake8-pytest-style = "^1.5.0"
flake8-string-format = "^0.3.0"
flake8-SQL = "^0.4.1"
flake8-tidy-imports = "^4.4.1"
flake8-variables-names = "^0.0.4"
pep8-naming = "^0.12.1"
wps-light = "^0.15.3"
dlint = "^0.11.0"

# Testing
pytest = "^5.2"
pytest-watch = "^4.2.0"
pytest-cov = "^2.12.1"
coverage = "^5.5"

# Type Checkers
mypy = "^0.910"             # Static Type Checking
typeguard = "^2.12.1"       # Runtime Type Checking (Runtime Type Checking with Functions Call)
pydantic = "^1.8.2"         # Runtime Type Checking (Runtime Data Validations with Errors)
marshmallow = "^3.13.0"     # Runtime Type Checking (Runtime Data Validation with Schema)

# Docs
Sphinx = "^4.2.0"
sphinx-rtd-theme = "^1.0.0"
sphinx-autobuild = "^2021.3.14"
myst-parser = "^0.15.2"

# Other
taskipy = "^1.8.2"          # Poetry Task Runnner
pre-commit = "^2.15.0"
safety = "^1.10.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 80
extend-exclude = ""

[tool.isort]
profile = "black"
line_length = 80
multi_line_output = 3
force_single_line = false
balanced_wrapping = true
default_section = "THIRDPARTY"
known_first_party = "pythonscientificcompcourse"
include_trailing_comma = true
skip_gitignore=true


[tool.mypy]
strict = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports=true
warn_return_any = true
warn_unused_configs = true
files=["src","tests"]
exclude = "docs"
